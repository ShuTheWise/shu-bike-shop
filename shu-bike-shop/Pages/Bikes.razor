@page "/bikes"

@using DataAccessLibrary
@using DataAccessLibrary.Models

@inject IBikesData bikesData
@inject IBasketService basket
@inject IJSRuntime jSRuntime

@if (bikes == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Bike</th>
                <th>Price</th>
                <th>Stock</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var bike in bikes)
            {
                <tr>
                    <td>@bike.Name</td>
                    <td>@bike.Price</td>
                    <td>@bike.Amount</td>
                    <td>
                        <button class="btn btn-primary" @onclick="()=>AddProductToBasket(bike)" disabled="@(bike.Amount < 1)">
                            <span class="oi oi-cart"> Add to basket</span>
                        </button>
                    </td>

                </tr>
            }
        </tbody>
    </table>
    <AuthorizeView>
        <Authorized>
            @if (@context.User.IsInRole(StaticVariables.ADMINISTRATION_ROLE))
            {
                <AddBike></AddBike>
            }
        </Authorized>
    </AuthorizeView>
}

@code {
    private List<BikeModel> bikes;

    protected override async Task OnInitializedAsync()
    {
        bikes = await bikesData.GetBikes();
    }

    private async Task AddProductToBasket(ProductModel productModel)
    {
        try
        {
            var add = await jSRuntime.Confirm($"Add {productModel.Name} to the basket?");

            if (add)
            {
                await basket.AddProduct(productModel, () => jSRuntime.Confirm("Item already in the basket, add again?"));
            }
        }
        catch (InsufficientProductAmountException ex)
        {
            await jSRuntime.Inform(ex.Message);
        }
    }
}
